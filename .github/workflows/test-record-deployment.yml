name: Deployment Frequency Debug Workflow

on:
  workflow_dispatch:
    inputs:
      deployment_status:
        description: 'Deployment Status'
        required: true
        default: 'Success'
        type: choice
        options:
        - Success
        - Failure
        - In Progress
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'Production'
        type: choice
        options:
        - Production
        - Staging
        - Development

jobs:
  test-record-deployment:
    runs-on: ubuntu-latest
    steps:
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time

    - name: Record Deployment in Azure DevOps
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
      run: |
        urlencode() {
          local length="${#1}"
          for (( i = 0; i < length; i++ )); do
            local c="${1:i:1}"
            case $c in
              [a-zA-Z0-9.~_-]) printf "$c" ;;
              *) printf '%%%02X' "'$c" ;;
            esac
          done
        }

        ENCODED_ORG=$(urlencode "${AZURE_DEVOPS_ORG}")
        ENCODED_PROJECT=$(urlencode "${AZURE_DEVOPS_PROJECT}")
        URL="https://dev.azure.com/${ENCODED_ORG}/${ENCODED_PROJECT}/_apis/wit/workitems/\$Deployment?api-version=6.0"
        echo "Constructed URL: $URL"

        # Define possible field references
        FIELD_REFS=("Custom.DeploymentFrequency" "DeploymentFrequency" "System.DeploymentFrequency")

        # Construct JSON data with multiple attempts for DeploymentFrequency
        JSON_DATA="["
        for field_ref in "${FIELD_REFS[@]}"; do
          JSON_DATA+=$(cat << EOF
          {
            "op": "add",
            "path": "/fields/${field_ref}",
            "value": "Multiple deploys per day"
          },
        EOF
        )
        done

        # Add other necessary fields
        JSON_DATA+=$(cat << EOF
          {
            "op": "add",
            "path": "/fields/System.Title",
            "value": "Deployment Frequency Test - ${{ github.run_number }}"
          },
          {
            "op": "add",
            "path": "/fields/System.State",
            "value": "New"
          }
        ]
        EOF
        )

        echo "JSON Data:"
        echo "$JSON_DATA"

        # Execute the curl command with verbose output
        RESPONSE=$(curl -v -s -X POST "${URL}" \
          -H "Content-Type: application/json-patch+json" \
          -H "Authorization: Basic $(echo -n :${AZURE_DEVOPS_PAT} | base64)" \
          -d "$JSON_DATA" 2>&1)

        echo "Full Curl Response:"
        echo "$RESPONSE"

        # Extract the HTTP status code
        HTTP_STATUS=$(echo "$RESPONSE" | grep -i "< HTTP" | awk '{print $3}')
        echo "HTTP Status Code: $HTTP_STATUS"

        # Check if the API call was successful
        if [[ "$HTTP_STATUS" =~ ^2 ]]; then
          echo "Deployment record created successfully"
          WORK_ITEM_ID=$(echo "$RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
          echo "Created Work Item ID: $WORK_ITEM_ID"
        else
          echo "Failed to create deployment record"
          ERROR_MESSAGE=$(echo "$RESPONSE" | grep -o '"message":"[^"]*' | cut -d'"' -f4)
          echo "Error Message: $ERROR_MESSAGE"
          if echo "$ERROR_MESSAGE" | grep -q "TF401324"; then
            echo "You might not have permission to create work items or use certain fields. Please check your PAT permissions."
          elif echo "$ERROR_MESSAGE" | grep -q "TF51535"; then
            FIELD_NAME=$(echo "$ERROR_MESSAGE" | grep -oP "TF51535: Cannot find field \K\S+")
            echo "The field $FIELD_NAME is missing or not accessible. Please check if it exists in your process or if you have permission to access it."
          fi
          exit 1
        fi

    - name: Debug Output
      run: |
        echo "Deployment ID: ${{ github.run_number }}"
        echo "Deployment Status: ${{ github.event.inputs.deployment_status }}"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Timestamp: ${{ steps.current-time.outputs.time }}"