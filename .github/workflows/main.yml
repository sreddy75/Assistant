name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Build and push streamlit image
        docker build -t ${ECR_REGISTRY}/myapp:streamlit -f Dockerfile.streamlit .
        docker push ${ECR_REGISTRY}/myapp:streamlit

        # Build and push fastapi image
        docker build -t ${ECR_REGISTRY}/myapp:fastapi -f Dockerfile.fastapi .
        docker push ${ECR_REGISTRY}/myapp:fastapi

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to EC2
      env:
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        echo "$EC2_PRIVATE_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem

        echo "Connecting to: ${EC2_USERNAME}@${HOST_DNS}"

        ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${EC2_USERNAME}@${HOST_DNS} '
          echo "Starting deployment process on EC2..."

          # Clone or pull the repository
          if [ ! -d "/home/ec2-user/Assistant" ]; then
            git clone https://github.com/sreddy75/Assistant.git /home/ec2-user/Assistant
          else
            cd /home/ec2-user/Assistant
            git pull origin main
          fi

          cd /home/ec2-user/Assistant

          # Check if Docker is installed and install it if missing
          if ! command -v docker &> /dev/null
          then
            sudo yum update -y
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo usermod -a -G docker ec2-user
          fi

          # Check if docker-compose is installed and install it if missing
          if ! command -v docker-compose &> /dev/null
          then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi

          # Set AWS environment variables
          export AWS_REGION='$AWS_REGION'
          export AWS_ACCOUNT_ID='$AWS_ACCOUNT_ID'

          echo "AWS_REGION: $AWS_REGION"
          echo "AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID"

          # Log in to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          echo "Contents of docker-compose.yml:"
          cat docker-compose.yml

          echo "Available Docker images:"
          docker images

          # Pull the latest Docker images and start the application
          docker-compose pull
          docker-compose up -d

          # Clean up old images
          docker image prune -af
        '

  record-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time

    - name: Record Deployment in Azure DevOps
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
      run: |
        curl -X POST "https://dev.azure.com/$AZURE_DEVOPS_ORG/$AZURE_DEVOPS_PROJECT/_apis/wit/workitems/\$Deployment?api-version=6.0" \
        -H "Content-Type: application/json-patch+json" \
        -H "Authorization: Basic $(echo -n :$AZURE_DEVOPS_PAT | base64)" \
        -d '[
          {
            "op": "add",
            "path": "/fields/System.Title",
            "value": "Deployment ${{ github.sha }}"
          },
          {
            "op": "add",
            "path": "/fields/System.State",
            "value": "Completed"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentID",
            "value": "${{ github.sha }}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentStatus",
            "value": "Success"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentTimestamp",
            "value": "${{ steps.current-time.outputs.time }}"
          }
        ]'