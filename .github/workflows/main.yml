name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: myapp
        IMAGE_TAG: ${{ github.sha }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        docker-compose build
        docker-compose push

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to EC2
      env:
        EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
        USER_NAME: ${{ secrets.EC2_USERNAME }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        # Debug: Check if required variables are set
        if [ -z "$EC2_PRIVATE_KEY" ]; then echo "EC2_PRIVATE_KEY is not set"; exit 1; fi
        if [ -z "$HOST_DNS" ]; then echo "HOST_DNS is not set"; exit 1; fi
        if [ -z "$USER_NAME" ]; then echo "USER_NAME is not set"; exit 1; fi

        # Save the private key to a file
        echo "$EC2_PRIVATE_KEY" > ec2_key.pem
        chmod 600 ec2_key.pem

        # Debug: Print SSH key info
        echo "SSH Key Info:"
        ssh-keygen -l -f ec2_key.pem

        # Debug: Print connection details (redact sensitive info in logs)
        echo "Connecting to: ${USER_NAME}@${HOST_DNS}"

        # Test SSH connection with verbose output
        echo "Testing SSH connection..."
        ssh -v -i ec2_key.pem -o StrictHostKeyChecking=no -o BatchMode=yes -o ConnectTimeout=5 ${USER_NAME}@${HOST_DNS} echo "SSH connection successful" || echo "SSH connection failed"

        # If the test is successful, proceed with the actual deployment
        if ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${USER_NAME}@${HOST_DNS} 'echo "SSH connection successful for deployment"'; then
          echo "Proceeding with deployment..."
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${USER_NAME}@${HOST_DNS} '
            echo "Starting deployment process on EC2..."
            # Your deployment script here
          '
        else
          echo "Failed to establish SSH connection for deployment"
          exit 1
        fi

  record-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time

    - name: Record Deployment in Azure DevOps
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
      run: |
        curl -X POST "https://dev.azure.com/$AZURE_DEVOPS_ORG/$AZURE_DEVOPS_PROJECT/_apis/wit/workitems/\$Deployment?api-version=6.0" \
        -H "Content-Type: application/json-patch+json" \
        -H "Authorization: Basic $(echo -n :$AZURE_DEVOPS_PAT | base64)" \
        -d '[
          {
            "op": "add",
            "path": "/fields/System.Title",
            "value": "Deployment ${{ github.sha }}"
          },
          {
            "op": "add",
            "path": "/fields/System.State",
            "value": "Completed"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentID",
            "value": "${{ github.sha }}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentStatus",
            "value": "Success"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentTimestamp",
            "value": "${{ steps.current-time.outputs.time }}"
          }
        ]'