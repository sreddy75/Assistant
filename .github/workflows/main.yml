name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check and create ECR repository
      run: |
        if ! aws ecr describe-repositories --repository-names myapp &> /dev/null; then
          echo "Repository does not exist. Creating..."
          aws ecr create-repository --repository-name myapp
        else
          echo "Repository already exists."
        fi

    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Build and push streamlit image
        docker build -t ${ECR_REGISTRY}/myapp:streamlit -f Dockerfile.streamlit .
        docker push ${ECR_REGISTRY}/myapp:streamlit

        # Build and push fastapi image
        docker build -t ${ECR_REGISTRY}/myapp:fastapi -f Dockerfile.fastapi .
        docker push ${ECR_REGISTRY}/myapp:fastapi

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Deploy to EC2
      env:
        HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        ssh -o StrictHostKeyChecking=accept-new $EC2_USERNAME@$HOST_DNS << 'ENDSSH'
          set -e
          
          # Update system and install Docker if not present
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo amazon-linux-extras install docker -y
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Add EC2 user to docker group
          sudo usermod -aG docker $USER
          
          # Reload user groups without logging out
          newgrp docker

          # Install docker-compose if not present
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Set AWS environment variables
          export AWS_REGION='$AWS_REGION'
          export AWS_ACCOUNT_ID='$AWS_ACCOUNT_ID'

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          # Clone or update repository
          if [ ! -d "Assistant" ]; then
            git clone https://github.com/sreddy75/Assistant.git
          else
            cd Assistant
            git pull origin main
          fi

          cd Assistant

          # Pull and start containers
          docker-compose pull
          docker-compose up -d

          # Clean up old images
          docker image prune -af
        ENDSSH

  record-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time

    - name: Record Deployment in Azure DevOps
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
      run: |
        curl -X POST "https://dev.azure.com/${AZURE_DEVOPS_ORG}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/\$Deployment?api-version=6.0" \
        -H "Content-Type: application/json-patch+json" \
        -H "Authorization: Basic $(echo -n :${AZURE_DEVOPS_PAT} | base64)" \
        -d '[
          {
            "op": "add",
            "path": "/fields/System.Title",
            "value": "Deployment ${{ github.sha }}"
          },
          {
            "op": "add",
            "path": "/fields/System.State",
            "value": "Completed"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentID",
            "value": "${{ github.sha }}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentStatus",
            "value": "Success"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentTimestamp",
            "value": "${{ steps.current-time.outputs.time }}"
          }
        ]'