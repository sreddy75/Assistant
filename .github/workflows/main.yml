name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: myapp
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  APP_PATH: ${{ secrets.APP_PATH }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        app: [streamlit, fastapi]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::637423187524:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActionsSession
        audience: sts.amazonaws.com

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.app }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.app }}-

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx create --use
        docker buildx build \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.app }}-$IMAGE_TAG \
          --file Dockerfile.${{ matrix.app }} \
          --push \
          .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.app }}-$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::637423187524:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActionsSession
        audience: sts.amazonaws.com

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Debug Environment Variables
      run: |
        echo "AWS_REGION: ${{ env.AWS_REGION }}"
        echo "ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}"
        echo "EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}"
        echo "APP_PATH: ${{ secrets.APP_PATH }}"
        echo "EC2_USERNAME: ${{ secrets.EC2_USERNAME }}"
        echo "EC2_HOST: ${{ secrets.EC2_HOST }}"
        echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"

    - name: Deploy to EC2
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        ENV_FILE_CONTENT: ${{ secrets.ENV_FILE_CONTENT }}
      run: |
        if [ -z "$EC2_HOST" ]; then
          echo "Error: EC2_HOST is empty. Please check your GitHub Secrets."
          exit 1
        fi

        if [ -z "$EC2_SSH_KEY" ]; then
          echo "Error: EC2_SSH_KEY is empty. Please check your GitHub Secrets."
          exit 1
        fi

        echo "$EC2_SSH_KEY" > ec2_ssh_key.pem
        chmod 400 ec2_ssh_key.pem

        # Test SSH connection
        ssh -i ec2_ssh_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=5 $EC2_USERNAME@$EC2_HOST echo "SSH connection successful" || { echo "SSH connection failed"; exit 1; }

        ssh -i ec2_ssh_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << EOF
          set -e
          cd ${{ secrets.APP_PATH }}
          echo "$ENV_FILE_CONTENT" > .env
          echo "export AWS_ACCOUNT_ID=637423187524" >> .env
          echo "export AWS_REGION=${{ env.AWS_REGION }}" >> .env
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker-compose pull
          docker-compose up -d
          docker image prune -af
        EOF

  record-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time

    - name: Get deployed work items
      id: get-work-items
      run: |
        COMMIT_MESSAGES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:%s)
        WORK_ITEMS=$(echo "$COMMIT_MESSAGES" | grep -oP 'AB#\K\d+' | sort -u | tr '\n' ',' | sed 's/,$//')
        echo "ids=$WORK_ITEMS" >> $GITHUB_OUTPUT

    - name: Calculate deployment duration
      id: deployment-duration
      run: |
        START_TIME="${{ steps.current-time.outputs.epoch }}"
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "duration=$DURATION" >> $GITHUB_OUTPUT

    - name: Determine deployment frequency
      id: deployment-frequency
      run: |
        DEPLOYMENTS_LAST_DAY=$(git log --since="1 day ago" --grep="Deployment Record" --oneline | wc -l)
        if [ $DEPLOYMENTS_LAST_DAY -gt 1 ]; then
          FREQUENCY="Multiple deploys per day"
        elif [ $DEPLOYMENTS_LAST_DAY -eq 1 ]; then
          FREQUENCY="Once per day"
        else
          FREQUENCY="Less than once per day"
        fi
        echo "frequency=$FREQUENCY" >> $GITHUB_OUTPUT

    - name: Record Deployment in Azure DevOps
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
      run: |
        urlencode() {
          local length="${#1}"
          for (( i = 0; i < length; i++ )); do
            local c="${1:i:1}"
            case $c in
              [a-zA-Z0-9.~_-]) printf "$c" ;;
              *) printf '%%%02X' "'$c" ;;
            esac
          done
        }

        ENCODED_ORG=$(urlencode "${AZURE_DEVOPS_ORG}")
        ENCODED_PROJECT=$(urlencode "${AZURE_DEVOPS_PROJECT}")
        URL="https://dev.azure.com/${ENCODED_ORG}/${ENCODED_PROJECT}/_apis/wit/workitems/\$Deployment?api-version=6.0"

        END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

        JSON_DATA=$(cat << EOF
        [
          { "op": "add", "path": "/fields/Custom.DeploymentStatus", "value": "Success" },
          { "op": "add", "path": "/fields/Custom.DeploymentTimestamp", "value": "${{ steps.current-time.outputs.rfc3339 }}" },
          { "op": "add", "path": "/fields/Custom.DeploymentID", "value": "${{ github.run_number }}" },
          { "op": "add", "path": "/fields/System.State", "value": "New" },
          { "op": "add", "path": "/fields/Custom.DeploymentStartTime", "value": "${{ steps.current-time.outputs.rfc3339 }}" },
          { "op": "add", "path": "/fields/Custom.DeploymentEndTime", "value": "${END_TIME}" },
          { "op": "add", "path": "/fields/Custom.Environment", "value": "Production" },
          { "op": "add", "path": "/fields/Custom.Version", "value": "${{ github.sha }}" },
          { "op": "add", "path": "/fields/Custom.DeploymentDuration", "value": ${{ steps.deployment-duration.outputs.duration }} },
          { "op": "add", "path": "/fields/Custom.TimeToRestore", "value": 0 },
          { "op": "add", "path": "/fields/Custom.DeploymentFrequency", "value": "${{ steps.deployment-frequency.outputs.frequency }}" },
          { "op": "add", "path": "/fields/System.Title", "value": "Deployment Record - ${{ github.run_number }}" },
          { "op": "add", "path": "/fields/Custom.DeployedWorkItems", "value": "${{ steps.get-work-items.outputs.ids }}" }
        ]
        EOF
        )

        RESPONSE=$(curl -s -X POST "${URL}" \
          -H "Content-Type: application/json-patch+json" \
          -H "Authorization: Basic $(echo -n :${AZURE_DEVOPS_PAT} | base64)" \
          -d "$JSON_DATA")

        HTTP_STATUS=$(echo "$RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
        
        if [ ! -z "$HTTP_STATUS" ]; then
          echo "Deployment record created successfully"
          WORK_ITEM_ID=$HTTP_STATUS
          echo "Created Work Item ID: $WORK_ITEM_ID"

          if [ ! -z "${{ steps.get-work-items.outputs.ids }}" ]; then
            IFS=',' read -ra WORK_ITEM_ARRAY <<< "${{ steps.get-work-items.outputs.ids }}"
            for ITEM_ID in "${WORK_ITEM_ARRAY[@]}"; do
              LINK_JSON=$(cat << EOF
              [
                {
                  "op": "add",
                  "path": "/relations/-",
                  "value": {
                    "rel": "System.LinkTypes.Related",
                    "url": "https://dev.azure.com/${AZURE_DEVOPS_ORG}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workItems/${ITEM_ID}",
                    "attributes": {
                      "comment": "Associated with deployment"
                    }
                  }
                }
              ]
              EOF
              )

              curl -s -X PATCH "https://dev.azure.com/${AZURE_DEVOPS_ORG}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/${WORK_ITEM_ID}?api-version=6.0" \
                -H "Content-Type: application/json-patch+json" \
                -H "Authorization: Basic $(echo -n :${AZURE_DEVOPS_PAT} | base64)" \
                -d "$LINK_JSON"
            done
          fi
        else
          echo "Failed to create deployment record"
          echo "Error: $RESPONSE"
          exit 1
        fi

    - name: Debug Output
      run: |
        echo "Deployment ID: ${{ github.run_number }}"
        echo "Deployment Status: Success"
        echo "Environment: Production"
        echo "Version: ${{ github.sha }}"
        echo "Timestamp: ${{ steps.current-time.outputs.rfc3339 }}"
        echo "Duration: ${{ steps.deployment-duration.outputs.duration }} seconds"
        echo "Frequency: ${{ steps.deployment-frequency.outputs.frequency }}"