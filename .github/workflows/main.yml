name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # This fetches all history for all branches and tags

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Check and create ECR repository
      run: |
        if ! aws ecr describe-repositories --repository-names myapp &> /dev/null; then
          echo "Repository does not exist. Creating..."
          aws ecr create-repository --repository-name myapp
        else
          echo "Repository already exists."
        fi

    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Build and push streamlit image
        docker build -t ${ECR_REGISTRY}/myapp:streamlit -f Dockerfile.streamlit .
        docker push ${ECR_REGISTRY}/myapp:streamlit

        # Build and push fastapi image
        docker build -t ${ECR_REGISTRY}/myapp:fastapi -f Dockerfile.fastapi .
        docker push ${ECR_REGISTRY}/myapp:fastapi

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        known_hosts: ${{ secrets.KNOWN_HOSTS }}

    - name: Deploy to EC2
      env:
        HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        ssh -o StrictHostKeyChecking=accept-new $EC2_USERNAME@$HOST_DNS << 'ENDSSH'
          set -e
          
          # Update system and install Docker if not present
          sudo yum update -y
          if ! command -v docker &> /dev/null; then
            sudo amazon-linux-extras install docker -y
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Add EC2 user to docker group
          sudo usermod -aG docker $USER
          
          # Reload user groups without logging out
          newgrp docker

          # Install docker-compose if not present
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Set AWS environment variables
          export AWS_REGION='$AWS_REGION'
          export AWS_ACCOUNT_ID='$AWS_ACCOUNT_ID'

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          # Clone or update repository
          if [ ! -d "Assistant" ]; then
            git clone https://github.com/sreddy75/Assistant.git
          else
            cd Assistant
            git pull origin main
          fi

          cd Assistant

          # Pull and start containers
          docker-compose pull
          docker-compose up -d

          # Clean up old images
          docker image prune -af
        ENDSSH

  record-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # This fetches all history for all branches and tags

    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time

    - name: Get deployed work items
      id: get-work-items
      run: |
        # Get the commit messages since the last deployment
        COMMIT_MESSAGES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:%s)
        
        # Extract work item IDs from commit messages
        # This assumes your team prefixes commits with the work item ID, e.g., "AB#123: Fix bug"
        WORK_ITEMS=$(echo "$COMMIT_MESSAGES" | grep -oP 'AB#\K\d+' | sort -u | tr '\n' ',' | sed 's/,$//')
        
        if [ -z "$WORK_ITEMS" ]; then
          echo "No work items found in commit messages"
          echo "::set-output name=ids::"
        else
          echo "Work Items: $WORK_ITEMS"
          echo "::set-output name=ids::$WORK_ITEMS"
        fi

    - name: Calculate deployment duration
      id: deployment-duration
      run: |
        START_TIME="${{ steps.current-time.outputs.epoch }}"
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        echo "::set-output name=duration::$DURATION"

    - name: Determine deployment frequency
      id: deployment-frequency
      run: |
        DEPLOYMENTS_LAST_DAY=$(git log --since="1 day ago" --grep="Deployment Record" --oneline | wc -l)
        if [ $DEPLOYMENTS_LAST_DAY -gt 1 ]; then
          FREQUENCY="Multiple deploys per day"
        elif [ $DEPLOYMENTS_LAST_DAY -eq 1 ]; then
          FREQUENCY="Once per day"
        else
          FREQUENCY="Less than once per day"
        fi
        echo "::set-output name=frequency::$FREQUENCY"

    - name: Record Deployment in Azure DevOps
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
      run: |
        urlencode() {
          local length="${#1}"
          for (( i = 0; i < length; i++ )); do
            local c="${1:i:1}"
            case $c in
              [a-zA-Z0-9.~_-]) printf "$c" ;;
              *) printf '%%%02X' "'$c" ;;
            esac
          done
        }

        ENCODED_ORG=$(urlencode "${AZURE_DEVOPS_ORG}")
        ENCODED_PROJECT=$(urlencode "${AZURE_DEVOPS_PROJECT}")
        URL="https://dev.azure.com/${ENCODED_ORG}/${ENCODED_PROJECT}/_apis/wit/workitems/\$Deployment?api-version=6.0"
        echo "Constructed URL: $URL"

        END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

        # Construct JSON data with all fields
        JSON_DATA=$(cat << EOF
        [
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentStatus",
            "value": "Success"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentTimestamp",
            "value": "${{ steps.current-time.outputs.rfc3339 }}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentID",
            "value": "${{ github.run_number }}"
          },
          {
            "op": "add",
            "path": "/fields/System.State",
            "value": "New"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentStartTime",
            "value": "${{ steps.current-time.outputs.rfc3339 }}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentEndTime",
            "value": "${END_TIME}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.Environment",
            "value": "Production"
          },
          {
            "op": "add",
            "path": "/fields/Custom.Version",
            "value": "${{ github.sha }}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentDuration",
            "value": ${{ steps.deployment-duration.outputs.duration }}
          },
          {
            "op": "add",
            "path": "/fields/Custom.TimeToRestore",
            "value": 0
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeploymentFrequency",
            "value": "${{ steps.deployment-frequency.outputs.frequency }}"
          },
          {
            "op": "add",
            "path": "/fields/System.Title",
            "value": "Deployment Record - ${{ github.run_number }}"
          },
          {
            "op": "add",
            "path": "/fields/Custom.DeployedWorkItems",
            "value": "${{ steps.get-work-items.outputs.ids }}"
          }
        ]
        EOF
        )

        echo "JSON Data:"
        echo "$JSON_DATA"

        # Execute the curl command with verbose output
        RESPONSE=$(curl -v -s -X POST "${URL}" \
          -H "Content-Type: application/json-patch+json" \
          -H "Authorization: Basic $(echo -n :${AZURE_DEVOPS_PAT} | base64)" \
          -d "$JSON_DATA" 2>&1)

        echo "Full Curl Response:"
        echo "$RESPONSE"

        # Extract the HTTP status code
        HTTP_STATUS=$(echo "$RESPONSE" | grep -i "< HTTP" | awk '{print $3}')
        echo "HTTP Status Code: $HTTP_STATUS"

        # Check if the API call was successful
        if [[ "$HTTP_STATUS" =~ ^2 ]]; then
          echo "Deployment record created successfully"
          WORK_ITEM_ID=$(echo "$RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
          echo "Created Work Item ID: $WORK_ITEM_ID"

          # Link the deployment work item to the associated work items
          if [ ! -z "${{ steps.get-work-items.outputs.ids }}" ]; then
            IFS=',' read -ra WORK_ITEM_ARRAY <<< "${{ steps.get-work-items.outputs.ids }}"
            for ITEM_ID in "${WORK_ITEM_ARRAY[@]}"; do
              LINK_JSON=$(cat << EOF
              [
                {
                  "op": "add",
                  "path": "/relations/-",
                  "value": {
                    "rel": "System.LinkTypes.Related",
                    "url": "https://dev.azure.com/${AZURE_DEVOPS_ORG}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workItems/${ITEM_ID}",
                    "attributes": {
                      "comment": "Associated with deployment"
                    }
                  }
                }
              ]
              EOF
              )

              curl -s -X PATCH "https://dev.azure.com/${AZURE_DEVOPS_ORG}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/${WORK_ITEM_ID}?api-version=6.0" \
                -H "Content-Type: application/json-patch+json" \
                -H "Authorization: Basic $(echo -n :${AZURE_DEVOPS_PAT} | base64)" \
                -d "$LINK_JSON"
            done
          fi
        else
          echo "Failed to create deployment record"
          ERROR_MESSAGE=$(echo "$RESPONSE" | grep -o '"message":"[^"]*' | cut -d'"' -f4)
          echo "Error Message: $ERROR_MESSAGE"
          if echo "$ERROR_MESSAGE" | grep -q "TF401324"; then
            echo "You might not have permission to create work items or use certain fields. Please check your PAT permissions."
          elif echo "$ERROR_MESSAGE" | grep -q "TF51535"; then
            FIELD_NAME=$(echo "$ERROR_MESSAGE" | grep -oP "TF51535: Cannot find field \K\S+")
            echo "The field $FIELD_NAME is missing or not accessible. Check if it exists in your process or if you have permission to access it."
          fi
          exit 1
        fi

    - name: Debug Output
      run: |
        echo "Deployment ID: ${{ github.run_number }}"
        echo "Deployment Status: Success"
        echo "Environment: Production"
        echo "Version: ${{ github.sha }}"
        echo "Timestamp: ${{ steps.current-time.outputs.rfc3339 }}"
        echo "Duration: ${{ steps.deployment-duration.outputs.duration }} seconds"
        echo "Frequency: ${{ steps.deployment-frequency.outputs.frequency }}"