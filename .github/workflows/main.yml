name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: myapp
        IMAGE_TAG: ${{ github.sha }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        docker-compose build
        docker-compose push

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to EC2
      env:
        SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        HOST_DNS: ${{ secrets.EC2_HOST_DNS }}
        USER_NAME: ec2-user
        AWS_REGION: ${{ secrets.AWS_REGION }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        echo "$SSH_DEPLOY_KEY" > deploy_key && chmod 600 deploy_key
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER_NAME}@${HOST_DNS} '
          # Set up SSH key for GitHub access
          mkdir -p ~/.ssh
          echo "$SSH_DEPLOY_KEY" > ~/.ssh/github_deploy_key && chmod 600 ~/.ssh/github_deploy_key
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

          # Use the deploy key for GitHub operations
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/github_deploy_key

          # Clone or pull the repository
          if [ ! -d "/home/ec2-user/Assistant" ]; then
            git clone git@github.com:sreddy75/Assistant.git /home/ec2-user/Assistant
          else
            cd /home/ec2-user/Assistant
            git pull origin main
          fi

          # Navigate to the directory containing docker-compose.yml
          cd /home/ec2-user/Assistant

          # Check if Docker is installed and install it if missing (this should only run once)
          if ! command -v docker &> /dev/null
          then
            sudo yum update -y
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            # Log out and log back in so that your user becomes effective in the docker group
            # For the purposes of this script, we'"'"'ll just run the next commands with sudo
          fi

          # Check if docker-compose is installed and install it if missing (this should only run once)
          if ! command -v docker-compose &> /dev/null
          then
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi

          # Log in to ECR
          sudo aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          # Pull the latest Docker image and start the application
          sudo docker-compose pull
          sudo docker-compose up -d

          # Clean up old images
          sudo docker image prune -af
        '

  record-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Get current time
      uses: josStorer/get-current-time@v2
      id: current-time

    - name: Record Deployment in Azure DevOps
      env:
        AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
        AZURE_DEVOPS_ORG: ${{ secrets.AZURE_DEVOPS_ORG }}
        AZURE_DEVOPS_PROJECT: ${{ secrets.AZURE_DEVOPS_PROJECT }}
      run: |
        curl -X POST "https://dev.azure.com/$AZURE_DEVOPS_ORG/$AZURE_DEVOPS_PROJECT/_apis/wit/workitems/\$Deployment?api-version=6.0" \
        -H "Content-Type: application/json-patch+json" \
        -H "Authorization: Basic $(echo -n :$AZURE_DEVOPS_PAT | base64)" \
        -d '[
          {
            "op": "add",
            "path": "/fields/System.Title",
            "value": "Deployment ${{ github.sha }}"
          },